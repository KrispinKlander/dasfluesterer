                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 19 2016) (Linux)
                                      4 ; This file was generated Mon Sep 25 18:40:33 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module uart
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _uart_print
                                     14 	.globl _uart_init
                                     15 	.globl _ledON
                                     16 	.globl _toggleLed
                                     17 	.globl _init_led
                                     18 	.globl _uart_reset
                                     19 	.globl _uart_write
                                     20 	.globl _strlen
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DATA
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area INITIALIZED
                                     29 ;--------------------------------------------------------
                                     30 ; Stack segment in internal ram 
                                     31 ;--------------------------------------------------------
                                     32 	.area	SSEG
      000000                         33 __start__stack:
      000000                         34 	.ds	1
                                     35 
                                     36 ;--------------------------------------------------------
                                     37 ; absolute external ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DABS (ABS)
                                     40 ;--------------------------------------------------------
                                     41 ; interrupt vector 
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
      000000                         44 __interrupt_vect:
      000000 82v00u00u00             45 	int s_GSINIT ;reset
      000004 82 00 00 00             46 	int 0x0000 ;trap
      000008 82 00 00 00             47 	int 0x0000 ;int0
      00000C 82 00 00 00             48 	int 0x0000 ;int1
      000010 82 00 00 00             49 	int 0x0000 ;int2
      000014 82 00 00 00             50 	int 0x0000 ;int3
      000018 82 00 00 00             51 	int 0x0000 ;int4
      00001C 82 00 00 00             52 	int 0x0000 ;int5
      000020 82 00 00 00             53 	int 0x0000 ;int6
      000024 82 00 00 00             54 	int 0x0000 ;int7
      000028 82 00 00 00             55 	int 0x0000 ;int8
      00002C 82 00 00 00             56 	int 0x0000 ;int9
      000030 82 00 00 00             57 	int 0x0000 ;int10
      000034 82 00 00 00             58 	int 0x0000 ;int11
      000038 82 00 00 00             59 	int 0x0000 ;int12
      00003C 82 00 00 00             60 	int 0x0000 ;int13
      000040 82 00 00 00             61 	int 0x0000 ;int14
      000044 82 00 00 00             62 	int 0x0000 ;int15
      000048 82 00 00 00             63 	int 0x0000 ;int16
      00004C 82 00 00 00             64 	int 0x0000 ;int17
      000050 82 00 00 00             65 	int 0x0000 ;int18
      000054 82 00 00 00             66 	int 0x0000 ;int19
      000058 82 00 00 00             67 	int 0x0000 ;int20
      00005C 82 00 00 00             68 	int 0x0000 ;int21
      000060 82 00 00 00             69 	int 0x0000 ;int22
      000064 82 00 00 00             70 	int 0x0000 ;int23
      000068 82 00 00 00             71 	int 0x0000 ;int24
      00006C 82 00 00 00             72 	int 0x0000 ;int25
      000070 82 00 00 00             73 	int 0x0000 ;int26
      000074 82 00 00 00             74 	int 0x0000 ;int27
      000078 82 00 00 00             75 	int 0x0000 ;int28
      00007C 82 00 00 00             76 	int 0x0000 ;int29
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME
                                     81 	.area GSINIT
                                     82 	.area GSFINAL
                                     83 	.area GSINIT
      000000                         84 __sdcc_gs_init_startup:
      000000                         85 __sdcc_init_data:
                                     86 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   87 	ldw x, #l_DATA
      000003 27 07            [ 1]   88 	jreq	00002$
      000005                         89 00001$:
      000005 72 4FuFFuFF      [ 1]   90 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   91 	decw x
      00000A 26 F9            [ 1]   92 	jrne	00001$
      00000C                         93 00002$:
      00000C AEr00r00         [ 2]   94 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   95 	jreq	00004$
      000011                         96 00003$:
      000011 D6uFFuFF         [ 1]   97 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   98 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   99 	decw	x
      000018 26 F7            [ 1]  100 	jrne	00003$
      00001A                        101 00004$:
                                    102 ; stm8_genXINIT() end
                                    103 	.area GSFINAL
      000000 CCr00r80         [ 2]  104 	jp	__sdcc_program_startup
                                    105 ;--------------------------------------------------------
                                    106 ; Home
                                    107 ;--------------------------------------------------------
                                    108 	.area HOME
                                    109 	.area HOME
      000080                        110 __sdcc_program_startup:
      000080 CCr00rE5         [ 2]  111 	jp	_main
                                    112 ;	return from main will return to caller
                                    113 ;--------------------------------------------------------
                                    114 ; code
                                    115 ;--------------------------------------------------------
                                    116 	.area CODE
                                    117 ;	uart.c: 4: int uart_write(const char *str) {
                                    118 ;	-----------------------------------------
                                    119 ;	 function uart_write
                                    120 ;	-----------------------------------------
      000000                        121 _uart_write:
      000000 52 03            [ 2]  122 	sub	sp, #3
                                    123 ;	uart.c: 6: for(i = 0; i < strlen(str); i++) {
      000002 0F 01            [ 1]  124 	clr	(0x01, sp)
      000004                        125 00106$:
      000004 1E 06            [ 2]  126 	ldw	x, (0x06, sp)
      000006 89               [ 2]  127 	pushw	x
      000007 CDr00r00         [ 4]  128 	call	_strlen
      00000A 5B 02            [ 2]  129 	addw	sp, #2
      00000C 1F 02            [ 2]  130 	ldw	(0x02, sp), x
      00000E 7B 01            [ 1]  131 	ld	a, (0x01, sp)
      000010 97               [ 1]  132 	ld	xl, a
      000011 49               [ 1]  133 	rlc	a
      000012 4F               [ 1]  134 	clr	a
      000013 A2 00            [ 1]  135 	sbc	a, #0x00
      000015 95               [ 1]  136 	ld	xh, a
      000016 13 02            [ 2]  137 	cpw	x, (0x02, sp)
      000018 24 17            [ 1]  138 	jrnc	00104$
                                    139 ;	uart.c: 7: while(!(USART2_SR & USART_SR_TXE));
      00001A                        140 00101$:
      00001A AE 52 40         [ 2]  141 	ldw	x, #0x5240
      00001D F6               [ 1]  142 	ld	a, (x)
      00001E 4D               [ 1]  143 	tnz	a
      00001F 2A F9            [ 1]  144 	jrpl	00101$
                                    145 ;	uart.c: 8: USART2_DR = str[i];
      000021 5F               [ 1]  146 	clrw	x
      000022 7B 01            [ 1]  147 	ld	a, (0x01, sp)
      000024 97               [ 1]  148 	ld	xl, a
      000025 72 FB 06         [ 2]  149 	addw	x, (0x06, sp)
      000028 F6               [ 1]  150 	ld	a, (x)
      000029 AE 52 41         [ 2]  151 	ldw	x, #0x5241
      00002C F7               [ 1]  152 	ld	(x), a
                                    153 ;	uart.c: 6: for(i = 0; i < strlen(str); i++) {
      00002D 0C 01            [ 1]  154 	inc	(0x01, sp)
      00002F 20 D3            [ 2]  155 	jra	00106$
      000031                        156 00104$:
                                    157 ;	uart.c: 10: return(i); // Bytes sent
      000031 7B 01            [ 1]  158 	ld	a, (0x01, sp)
      000033 97               [ 1]  159 	ld	xl, a
      000034 49               [ 1]  160 	rlc	a
      000035 4F               [ 1]  161 	clr	a
      000036 A2 00            [ 1]  162 	sbc	a, #0x00
      000038 95               [ 1]  163 	ld	xh, a
      000039 5B 03            [ 2]  164 	addw	sp, #3
      00003B 81               [ 4]  165 	ret
                                    166 ;	uart.c: 13: void uart_reset(void) {
                                    167 ;	-----------------------------------------
                                    168 ;	 function uart_reset
                                    169 ;	-----------------------------------------
      00003C                        170 _uart_reset:
                                    171 ;	uart.c: 15: USART2_CR1 = 0;
      00003C 35 00 52 44      [ 1]  172 	mov	0x5244+0, #0x00
                                    173 ;	uart.c: 16: USART2_CR2 = 0;
      000040 35 00 52 45      [ 1]  174 	mov	0x5245+0, #0x00
                                    175 ;	uart.c: 17: USART2_CR3 = 0;
      000044 35 00 52 46      [ 1]  176 	mov	0x5246+0, #0x00
                                    177 ;	uart.c: 18: USART2_CR4 = 0;
      000048 35 00 52 47      [ 1]  178 	mov	0x5247+0, #0x00
                                    179 ;	uart.c: 19: USART2_CR5 = 0;
      00004C 35 00 52 48      [ 1]  180 	mov	0x5248+0, #0x00
                                    181 ;	uart.c: 20: USART2_CR6 = 0;
      000050 35 00 52 49      [ 1]  182 	mov	0x5249+0, #0x00
                                    183 ;	uart.c: 21: USART2_GTR = 0;
      000054 35 00 52 4A      [ 1]  184 	mov	0x524a+0, #0x00
                                    185 ;	uart.c: 22: USART2_PSCR = 0;
      000058 35 00 52 4B      [ 1]  186 	mov	0x524b+0, #0x00
      00005C 81               [ 4]  187 	ret
                                    188 ;	uart.c: 25: void init_led(void) {
                                    189 ;	-----------------------------------------
                                    190 ;	 function init_led
                                    191 ;	-----------------------------------------
      00005D                        192 _init_led:
                                    193 ;	uart.c: 29: PD_DDR = 0x01;
      00005D 35 01 50 11      [ 1]  194 	mov	0x5011+0, #0x01
                                    195 ;	uart.c: 33: PD_CR1 = 0x00;
      000061 35 00 50 12      [ 1]  196 	mov	0x5012+0, #0x00
                                    197 ;	uart.c: 34: PD_CR2 = 0x00;
      000065 35 00 50 13      [ 1]  198 	mov	0x5013+0, #0x00
                                    199 ;	uart.c: 36: PD_ODR ^= 0x00;
      000069 AE 50 0F         [ 2]  200 	ldw	x, #0x500f
      00006C F6               [ 1]  201 	ld	a, (x)
      00006D AE 50 0F         [ 2]  202 	ldw	x, #0x500f
      000070 F7               [ 1]  203 	ld	(x), a
      000071 81               [ 4]  204 	ret
                                    205 ;	uart.c: 39: void toggleLed(void) {
                                    206 ;	-----------------------------------------
                                    207 ;	 function toggleLed
                                    208 ;	-----------------------------------------
      000072                        209 _toggleLed:
                                    210 ;	uart.c: 40: PD_ODR ^= 0x01;
      000072 AE 50 0F         [ 2]  211 	ldw	x, #0x500f
      000075 F6               [ 1]  212 	ld	a, (x)
      000076 A8 01            [ 1]  213 	xor	a, #0x01
      000078 F7               [ 1]  214 	ld	(x), a
      000079 81               [ 4]  215 	ret
                                    216 ;	uart.c: 43: void ledON(void) {
                                    217 ;	-----------------------------------------
                                    218 ;	 function ledON
                                    219 ;	-----------------------------------------
      00007A                        220 _ledON:
                                    221 ;	uart.c: 44: PD_ODR = 0x01;
      00007A 35 01 50 0F      [ 1]  222 	mov	0x500f+0, #0x01
      00007E 81               [ 4]  223 	ret
                                    224 ;	uart.c: 48: void uart_init(void) {
                                    225 ;	-----------------------------------------
                                    226 ;	 function uart_init
                                    227 ;	-----------------------------------------
      00007F                        228 _uart_init:
                                    229 ;	uart.c: 50: uart_reset();
      00007F CDr00r3C         [ 4]  230 	call	_uart_reset
                                    231 ;	uart.c: 54: USART2_CR1 &= ~(USART_CR1_M);		// 8 Data bits
      000082 AE 52 44         [ 2]  232 	ldw	x, #0x5244
      000085 F6               [ 1]  233 	ld	a, (x)
      000086 A4 EF            [ 1]  234 	and	a, #0xef
      000088 F7               [ 1]  235 	ld	(x), a
                                    236 ;	uart.c: 55: USART2_CR1 &= ~(USART_CR1_PCEN);	// Disable parity
      000089 AE 52 44         [ 2]  237 	ldw	x, #0x5244
      00008C F6               [ 1]  238 	ld	a, (x)
      00008D A4 FB            [ 1]  239 	and	a, #0xfb
      00008F F7               [ 1]  240 	ld	(x), a
                                    241 ;	uart.c: 56: USART2_CR3 &= ~(USART_CR3_STOP1);	// 1 stop bit
      000090 AE 52 46         [ 2]  242 	ldw	x, #0x5246
      000093 F6               [ 1]  243 	ld	a, (x)
      000094 A4 EF            [ 1]  244 	and	a, #0xef
      000096 F7               [ 1]  245 	ld	(x), a
                                    246 ;	uart.c: 57: USART2_CR3 &= ~(USART_CR3_STOP2);
      000097 AE 52 46         [ 2]  247 	ldw	x, #0x5246
      00009A F6               [ 1]  248 	ld	a, (x)
      00009B A4 DF            [ 1]  249 	and	a, #0xdf
      00009D F7               [ 1]  250 	ld	(x), a
                                    251 ;	uart.c: 58: USART2_BRR1 = 0x68;	// 9600 baud rate
      00009E 35 68 52 42      [ 1]  252 	mov	0x5242+0, #0x68
                                    253 ;	uart.c: 59: USART2_BRR1 = 0x02;	
      0000A2 35 02 52 42      [ 1]  254 	mov	0x5242+0, #0x02
                                    255 ;	uart.c: 63: USART2_CR2 &= ~(USART_CR2_TEN);
      0000A6 AE 52 45         [ 2]  256 	ldw	x, #0x5245
      0000A9 F6               [ 1]  257 	ld	a, (x)
      0000AA A4 F7            [ 1]  258 	and	a, #0xf7
      0000AC F7               [ 1]  259 	ld	(x), a
                                    260 ;	uart.c: 64: USART2_CR2 &= ~(USART_CR2_REN);
      0000AD AE 52 45         [ 2]  261 	ldw	x, #0x5245
      0000B0 F6               [ 1]  262 	ld	a, (x)
      0000B1 A4 FB            [ 1]  263 	and	a, #0xfb
      0000B3 F7               [ 1]  264 	ld	(x), a
                                    265 ;	uart.c: 68: USART2_CR3 |= USART_CR3_CPOL;
      0000B4 AE 52 46         [ 2]  266 	ldw	x, #0x5246
      0000B7 F6               [ 1]  267 	ld	a, (x)
      0000B8 AA 04            [ 1]  268 	or	a, #0x04
      0000BA F7               [ 1]  269 	ld	(x), a
                                    270 ;	uart.c: 69: USART2_CR3 |= USART_CR3_CPHA;
      0000BB AE 52 46         [ 2]  271 	ldw	x, #0x5246
      0000BE F6               [ 1]  272 	ld	a, (x)
      0000BF AA 02            [ 1]  273 	or	a, #0x02
      0000C1 F7               [ 1]  274 	ld	(x), a
                                    275 ;	uart.c: 70: USART2_CR3 |= USART_CR3_LBCL;
      0000C2 72 10 52 46      [ 1]  276 	bset	0x5246, #0
                                    277 ;	uart.c: 73: USART2_CR2 |= USART_CR2_TEN;
      0000C6 AE 52 45         [ 2]  278 	ldw	x, #0x5245
      0000C9 F6               [ 1]  279 	ld	a, (x)
      0000CA AA 08            [ 1]  280 	or	a, #0x08
      0000CC F7               [ 1]  281 	ld	(x), a
      0000CD 81               [ 4]  282 	ret
                                    283 ;	uart.c: 76: void uart_print(const char *message)
                                    284 ;	-----------------------------------------
                                    285 ;	 function uart_print
                                    286 ;	-----------------------------------------
      0000CE                        287 _uart_print:
                                    288 ;	uart.c: 79: for (ch = message; *ch; ch++) {
      0000CE 16 03            [ 2]  289 	ldw	y, (0x03, sp)
      0000D0                        290 00106$:
      0000D0 90 F6            [ 1]  291 	ld	a, (y)
      0000D2 4D               [ 1]  292 	tnz	a
      0000D3 27 0F            [ 1]  293 	jreq	00108$
                                    294 ;	uart.c: 81: USART2_DR = *ch;
      0000D5 AE 52 41         [ 2]  295 	ldw	x, #0x5241
      0000D8 F7               [ 1]  296 	ld	(x), a
                                    297 ;	uart.c: 83: while (USART2_SR & USART_SR_TXE);
      0000D9                        298 00101$:
      0000D9 AE 52 40         [ 2]  299 	ldw	x, #0x5240
      0000DC F6               [ 1]  300 	ld	a, (x)
      0000DD 4D               [ 1]  301 	tnz	a
      0000DE 2B F9            [ 1]  302 	jrmi	00101$
                                    303 ;	uart.c: 79: for (ch = message; *ch; ch++) {
      0000E0 90 5C            [ 2]  304 	incw	y
      0000E2 20 EC            [ 2]  305 	jra	00106$
      0000E4                        306 00108$:
      0000E4 81               [ 4]  307 	ret
                                    308 ;	uart.c: 87: int main() {
                                    309 ;	-----------------------------------------
                                    310 ;	 function main
                                    311 ;	-----------------------------------------
      0000E5                        312 _main:
      0000E5 52 08            [ 2]  313 	sub	sp, #8
                                    314 ;	uart.c: 92: CLK_DIVR = 0x00; // Set the frequency to 16 MHz
      0000E7 35 00 50 C0      [ 1]  315 	mov	0x50c0+0, #0x00
                                    316 ;	uart.c: 93: CLK_PCKENR1 = 0xFF; // Enable peripherals
      0000EB 35 FF 50 C3      [ 1]  317 	mov	0x50c3+0, #0xff
                                    318 ;	uart.c: 95: init_led();
      0000EF CDr00r5D         [ 4]  319 	call	_init_led
                                    320 ;	uart.c: 96: uart_init();
      0000F2 CDr00r7F         [ 4]  321 	call	_uart_init
                                    322 ;	uart.c: 97: ledOn();
      0000F5 CDr00r00         [ 4]  323 	call	_ledOn
                                    324 ;	uart.c: 98: while (1) {
      0000F8                        325 00103$:
                                    326 ;	uart.c: 99: uart_print(message);
      0000F8 AEr01r2E         [ 2]  327 	ldw	x, #_main_message_1_37+0
      0000FB 89               [ 2]  328 	pushw	x
      0000FC CDr00rCE         [ 4]  329 	call	_uart_print
      0000FF 5B 02            [ 2]  330 	addw	sp, #2
                                    331 ;	uart.c: 100: for (counter = 0; counter < 250000; counter++);
      000101 AE D0 90         [ 2]  332 	ldw	x, #0xd090
      000104 1F 03            [ 2]  333 	ldw	(0x03, sp), x
      000106 A6 03            [ 1]  334 	ld	a, #0x03
      000108 0F 01            [ 1]  335 	clr	(0x01, sp)
      00010A                        336 00107$:
      00010A 1E 03            [ 2]  337 	ldw	x, (0x03, sp)
      00010C 1D 00 01         [ 2]  338 	subw	x, #0x0001
      00010F 1F 07            [ 2]  339 	ldw	(0x07, sp), x
      000111 A2 00            [ 1]  340 	sbc	a, #0x00
      000113 97               [ 1]  341 	ld	xl, a
      000114 7B 01            [ 1]  342 	ld	a, (0x01, sp)
      000116 A2 00            [ 1]  343 	sbc	a, #0x00
      000118 95               [ 1]  344 	ld	xh, a
      000119 02               [ 1]  345 	rlwa	x
      00011A 6B 01            [ 1]  346 	ld	(0x01, sp), a
      00011C 01               [ 1]  347 	rrwa	x
      00011D 16 07            [ 2]  348 	ldw	y, (0x07, sp)
      00011F 17 03            [ 2]  349 	ldw	(0x03, sp), y
      000121 9F               [ 1]  350 	ld	a, xl
      000122 16 07            [ 2]  351 	ldw	y, (0x07, sp)
      000124 26 E4            [ 1]  352 	jrne	00107$
      000126 5D               [ 2]  353 	tnzw	x
      000127 27 CF            [ 1]  354 	jreq	00103$
      000129 20 DF            [ 2]  355 	jra	00107$
      00012B 5B 08            [ 2]  356 	addw	sp, #8
      00012D 81               [ 4]  357 	ret
                                    358 	.area CODE
      00012E                        359 _main_message_1_37:
      00012E 48 65 6C 6C 6F 20 66   360 	.ascii "Hello from Das Flueterr"
             72 6F 6D 20 44 61 73
             20 46 6C 75 65 74 65
             72 72
      000145 00                     361 	.db 0x00
                                    362 	.area INITIALIZER
                                    363 	.area CABS (ABS)
